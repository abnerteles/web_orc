// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Sistema de Gestão de Orçamentos e Obras

model Cliente {
    id          String   @id @default(cuid())
    tipo        String   // "fisica" ou "juridica"
    documento   String   @unique
    nome        String
    endereco    String?
    telefone    String?
    email       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relacionamentos
    orcamentos  Orcamento[]
    obras       Obra[]
    
    @@index([documento])
    @@index([nome])
}

model Fornecedor {
    id          String   @id @default(cuid())
    tipo        String   // "fisica" ou "juridica"
    documento   String   @unique
    nome        String
    endereco    String?
    telefone    String?
    email       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relacionamentos
    itensOrcamento ItemOrcamento[]
    
    @@index([documento])
    @@index([nome])
}

model Prestador {
    id          String   @id @default(cuid())
    tipo        String   // "fisica" ou "juridica"
    documento   String   @unique
    nome        String
    endereco    String?
    telefone    String?
    email       String?
    especialidade String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relacionamentos
    obras       Obra[]
    
    @@index([documento])
    @@index([nome])
}

model Orcamento {
    id              String   @id @default(cuid())
    numero          String   @unique
    clienteId       String
    descricao       String
    valorTotal      Float    @default(0)
    status          String   @default("rascunho") // "rascunho", "enviado", "aprovado", "rejeitado"
    dataVencimento  DateTime?
    observacoes     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    // Relacionamentos
    cliente         Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
    itens           ItemOrcamento[]
    obra            Obra?
    
    @@index([numero])
    @@index([clienteId])
    @@index([status])
}

model ItemOrcamento {
    id              String   @id @default(cuid())
    orcamentoId     String
    fornecedorId    String?
    descricao       String
    quantidade      Float
    valorUnitario   Float
    valorTotal      Float
    categoria       String?
    observacoes     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    // Relacionamentos
    orcamento       Orcamento @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
    fornecedor      Fornecedor? @relation(fields: [fornecedorId], references: [id])
    
    @@index([orcamentoId])
    @@index([fornecedorId])
}

model Obra {
    id              String   @id @default(cuid())
    numero          String   @unique
    orcamentoId     String   @unique
    clienteId       String
    prestadorId     String?
    titulo          String
    descricao       String
    endereco        String?
    valorContrato   Float
    status          String   @default("planejamento") // "planejamento", "em_andamento", "pausada", "concluida", "cancelada"
    dataInicio      DateTime?
    dataPrevisao    DateTime?
    dataConclusao   DateTime?
    progresso       Float    @default(0) // 0-100
    observacoes     String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    // Relacionamentos
    orcamento       Orcamento @relation(fields: [orcamentoId], references: [id])
    cliente         Cliente @relation(fields: [clienteId], references: [id])
    prestador       Prestador? @relation(fields: [prestadorId], references: [id])
    etapas          EtapaObra[]
    
    @@index([numero])
    @@index([orcamentoId])
    @@index([clienteId])
    @@index([status])
}

model EtapaObra {
    id              String   @id @default(cuid())
    obraId          String
    titulo          String
    descricao       String?
    status          String   @default("pendente") // "pendente", "em_andamento", "concluida"
    dataInicio      DateTime?
    dataPrevisao    DateTime?
    dataConclusao   DateTime?
    progresso       Float    @default(0) // 0-100
    observacoes     String?
    ordem           Int      @default(0)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    
    // Relacionamentos
    obra            Obra @relation(fields: [obraId], references: [id], onDelete: Cascade)
    
    @@index([obraId])
    @@index([status])
}

model Configuracao {
    id          String   @id @default(cuid())
    chave       String   @unique
    valor       String
    descricao   String?
    tipo        String   @default("string") // "string", "number", "boolean", "json"
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@index([chave])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   // Para autenticação local
    empresa       String?
    tipo          String    @default("user") // "user", "admin", "root"
    plano         String    @default("free") // "free", "basic", "premium"
    status        String    @default("active") // "active", "inactive", "suspended"
    dataExpiracao DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    
    @@index([email])
    @@index([tipo])
    @@index([status])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
